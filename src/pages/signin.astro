---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/PageLayout.astro";

import ContainerSection from "@/components/common/ContainerSection.astro";

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has("__session")) {
	const sessionCookie = Astro.cookies.get("__session").value;
	const decodedCookie = await auth.verifySessionCookie(sessionCookie);
	if (decodedCookie) {
		return Astro.redirect("/dashboard/");
	}
}
---

<Layout meta={{ title: "Signin" }}>
	<ContainerSection>
		<h1>Sign in</h1>
		<p>New here? <a href="/register">Create an account</a></p>
		<form id="login-form" method="post">
			<label for="email" for="email">Email</label>
			<input type="email" name="email" id="email" />
			<label for="password">Password</label>
			<input type="password" name="password" id="password" />
			<button type="submit">Login</button>
		</form>
		<div>
			<button id="google-signin-button" type="button">Sign in with Google</button>
		</div>
		<div>
			<button id="github-signin-button" type="button">Sign in with GitHub</button>
		</div>
	</ContainerSection>
</Layout>
<script>
	import {
		getAuth,
		inMemoryPersistence,
		signInWithEmailAndPassword,
		signInWithPopup,
		GoogleAuthProvider,
		GithubAuthProvider,
		type AuthProvider,
	} from "firebase/auth";
	import { app } from "../firebase/client";

	const auth = getAuth(app);
	const googleProvider = new GoogleAuthProvider();
	const githubProvider = new GithubAuthProvider();
	auth.setPersistence(inMemoryPersistence);

	const handleSignInWithPopup = async (provider: AuthProvider) => {
		try {
			const result = await signInWithPopup(auth, provider);
			const user = result.user;
			const idToken = await user.getIdToken();
			const response = await fetch("/api/auth/third-party-signin", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({ idToken }),
			});

			if (response.redirected) {
				window.location.assign(response.url);
			}
		} catch (error) {
			console.error(`Error signing in with ${provider.providerId.split(".")[0]}:`, error);
		}
	};

	document
		.getElementById("github-signin-button")
		?.addEventListener("click", () => handleSignInWithPopup(githubProvider));
	document
		.getElementById("google-signin-button")
		?.addEventListener("click", () => handleSignInWithPopup(googleProvider));
</script>
